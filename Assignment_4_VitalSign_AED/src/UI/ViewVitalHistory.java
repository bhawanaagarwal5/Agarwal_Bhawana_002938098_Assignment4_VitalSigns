/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

/**
 *
 * @author agarw
 */
import Functionality.patientDetails;
import Functionality.personDetails;
import Functionality.vitalSignHistory;
import Functionality.vitalReadings;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.util.Date;
import javax.swing.JOptionPane;

public class ViewVitalHistory extends javax.swing.JPanel {

    /**
     * Creates new form ViewVitalHistory
     */
    private vitalSignHistory vitalSignHistory;
    private personDetails personDetails;
    private JPanel jPanelContainer;
    private String Normality;
    public ViewVitalHistory(vitalSignHistory vitalSignHistory,personDetails personDetails,JPanel jPanelContainer, String firstNameOfPatient) {
        initComponents();
        this.vitalSignHistory = vitalSignHistory;
        this.personDetails = personDetails;
        this.jPanelContainer = jPanelContainer;
        //ValidateNormality();
        if(firstNameOfPatient == "" && firstNameOfPatient.isEmpty()){
              populateVitalTable();
        }
        else{
             populateVitalTableForPatient(firstNameOfPatient);
        }
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        vitalHistoryjTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnDeleteVital = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 102, 153));

        vitalHistoryjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "City Name", "Community Name", "Respiratory Rate", "Heart Rate", "Systolic rate", "Weight", "Vital Sign", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(vitalHistoryjTable);
        if (vitalHistoryjTable.getColumnModel().getColumnCount() > 0) {
            vitalHistoryjTable.getColumnModel().getColumn(0).setResizable(false);
            vitalHistoryjTable.getColumnModel().getColumn(1).setResizable(false);
            vitalHistoryjTable.getColumnModel().getColumn(2).setResizable(false);
            vitalHistoryjTable.getColumnModel().getColumn(3).setResizable(false);
            vitalHistoryjTable.getColumnModel().getColumn(4).setResizable(false);
            vitalHistoryjTable.getColumnModel().getColumn(5).setResizable(false);
            vitalHistoryjTable.getColumnModel().getColumn(6).setResizable(false);
            vitalHistoryjTable.getColumnModel().getColumn(7).setResizable(false);
            vitalHistoryjTable.getColumnModel().getColumn(8).setResizable(false);
        }

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 102, 102));
        jButton1.setText("Back");
        jButton1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(204, 204, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 102, 102));
        jButton2.setText("Update Vital");
        jButton2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jButton2.setBorderPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("View Vital Details");

        btnDeleteVital.setBackground(new java.awt.Color(204, 204, 255));
        btnDeleteVital.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnDeleteVital.setForeground(new java.awt.Color(0, 102, 102));
        btnDeleteVital.setText("Delete Vital");
        btnDeleteVital.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        btnDeleteVital.setBorderPainted(false);
        btnDeleteVital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteVitalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(282, 282, 282)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnDeleteVital, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 994, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(214, 214, 214)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1)))
                .addGap(48, 48, 48)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteVital, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(162, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jPanelContainer.remove(this);
        //viewPersonDetails.generateTable();
        CardLayout layout = (CardLayout)jPanelContainer.getLayout();
        layout.previous(jPanelContainer);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int count = vitalHistoryjTable.getSelectedRow();
        vitalReadings vitalreadings = personDetails.getPatientDetails().getVitalSign();
        if(count >= 0)
        {
            vitalreadings =(vitalReadings) vitalHistoryjTable.getValueAt(count, 0);
            UpdateVitalReadings vpd = new UpdateVitalReadings(vitalreadings,personDetails, jPanelContainer, this);
            jPanelContainer.add("UpdateVitalread",vpd);
            CardLayout layout = (CardLayout)jPanelContainer.getLayout();
            layout.next(jPanelContainer);
            
        }
        else{
               JOptionPane.showMessageDialog(null,"Please select at least one row to update the Vital Information");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnDeleteVitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteVitalActionPerformed
        // TODO add your handling code here:
        
        int count = vitalHistoryjTable.getSelectedRow();
        vitalReadings vitalreadings = personDetails.getPatientDetails().getVitalSign();
        if(count >= 0)
        {
            vitalreadings =(vitalReadings) vitalHistoryjTable.getValueAt(count, 0);
            vitalSignHistory.deleteVitalSignDetails(vitalreadings);
            
            JOptionPane.showMessageDialog(this, "Vital Information Detail has been deleted successfully.");
            populateVitalTable();
        }
        else{
               JOptionPane.showMessageDialog(null,"Please select at least one row to delete the Vital Information");
        }
    }//GEN-LAST:event_btnDeleteVitalActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteVital;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable vitalHistoryjTable;
    // End of variables declaration//GEN-END:variables

    public void populateVitalTable() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
         DefaultTableModel dtm = (DefaultTableModel)vitalHistoryjTable.getModel();
         dtm.setRowCount(0);
        // for (vitalReadings vsr : vitalSignHistory.getVitalSignHistory())
         for (vitalReadings vsr : vitalSignHistory.getVitalSignHistory())
         {
            Object row[] = new Object[9];
           // Object col[] = new Object[2];
           // row[0][0] = vsr.getDateTime();
           // row[0][1] = vsr.getVitalSign();
            row[0] = vsr;
            row[1] = vsr.getCityName();
            row[2] = vsr.getCommunityName();
            row[3] = vsr.getRespiratoryRate();
            row[4] = vsr.getHeartRate();
            row[5] = vsr.getSystolicPressure();
            row[6] = vsr.getWeightPounds();
            row[7] = vsr.getVitalSign(); //Normality;
            row[8] = vsr.getDateTime();
            dtm.addRow(row);
         }
    }

    public void ValidateNormality() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        int age = personDetails.getPatientDetails().getAge();
        for(vitalReadings vr:vitalSignHistory.getVitalSignHistory())
        {
            float respiratoryRate=vr.getRespiratoryRate();
            float heartRate = vr.getHeartRate();
            float systolicBldPre = vr.getSystolicPressure();
            float weightInPound = vr.getWeightPounds();
        
  if(age > 0 && age <=3)
        {
            if((respiratoryRate >= 20 && respiratoryRate<= 30) && (heartRate>=80 && heartRate<=130)
                    && (systolicBldPre >= 80 && systolicBldPre <=110) && (weightInPound >=22 && weightInPound <=31))
                    {
                        Normality = "Normal";
                    }
            else
            {
                Normality = "Abnormal";
            }
        }
        else if(age >=4 && age <= 5)
        {
         if((respiratoryRate >= 20 && respiratoryRate<= 30) && (heartRate>=80 && heartRate<=120)
                    && (systolicBldPre >= 80 && systolicBldPre <=110) && (weightInPound >=31 && weightInPound <=40))
                    {
                         Normality = "Normal";
                    }
         else
         {
             Normality = "Abnormal";
         }
       }
        else if(age >=6 && age <= 12)
        {
            if((respiratoryRate >= 20 && respiratoryRate<= 30) && (heartRate>=70 && heartRate<=100)
                    && (systolicBldPre >= 80 && systolicBldPre <=120) && (weightInPound >=41 && weightInPound <=92))
                    {
                        Normality = "Normal";
                    }
            else
            {
                Normality = "Abnormal";
            }
        }
        else
        {
            if((respiratoryRate >= 12 && respiratoryRate<= 20) && (heartRate>=55 && heartRate<=105)
                    && (systolicBldPre >= 110 && systolicBldPre <=120) && (weightInPound >110))
                    {
                        Normality = "Normal";
                    }
            else
            {
                Normality = "Abnormal";
            }
        }
        }
    }

    private void populateVitalTableForPatient(String firstNameOfPatient) {
         
        DefaultTableModel dtm = (DefaultTableModel)vitalHistoryjTable.getModel();
        //System.out.println(firstNameOfPatient);
         dtm.setRowCount(0);
        // for (vitalReadings vsr : vitalSignHistory.getVitalSignHistory())
         for (vitalReadings vsr : vitalSignHistory.getVitalSignHistoryByPatientName(firstNameOfPatient))
         {
           Object row[] = new Object[9];
           // Object col[] = new Object[2];
           // row[0][0] = vsr.getDateTime();
           // row[0][1] = vsr.getVitalSign();
            row[0] = vsr;
            row[1] = vsr.getCityName();
            row[2] = vsr.getCommunityName();
            row[3] = vsr.getRespiratoryRate();
            row[4] = vsr.getHeartRate();
            row[5] = vsr.getSystolicPressure();
            row[6] = vsr.getWeightPounds();
            row[7] = vsr.getVitalSign(); //Normality;
            row[8] = vsr.getDateTime();
            dtm.addRow(row);
         }
    }
}
